

plugins {
	id "org.asciidoctor.convert" version "1.5.3"
	id "org.springframework.boot" version "2.1.5.RELEASE"
	id "io.spring.dependency-management" version "1.0.7.RELEASE"
	id "org.jetbrains.kotlin.jvm" version "1.3.31"
	id "org.jetbrains.kotlin.plugin.spring" version "1.3.31"
	id "com.palantir.docker" version "0.22.1"
	id "com.palantir.docker-compose" version "0.22.1"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'

group = "sanchez.sanchez.sergio"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_1_8

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}

}

repositories {
	 jcenter()
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}


dependencies {
	
	implementation "org.springframework.boot:spring-boot-starter-data-mongodb-reactive"
	implementation "org.springframework.boot:spring-boot-starter-hateoas"
	implementation "org.springframework.boot:spring-boot-starter-webflux"
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "io.micrometer:micrometer-registry-prometheus"
	
	implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
	
	developmentOnly "org.springframework.boot:spring-boot-devtools"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "io.projectreactor:reactor-test"
	testImplementation "org.springframework.restdocs:spring-restdocs-webtestclient"
	testImplementation "org.springframework.security:spring-security-test"
	
	implementation "org.jetbrains.kotlin:kotlin-reflect"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	
	
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

test {
	outputs.dir snippetsDir
}


asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

bootJar {
	archiveName "teveo_platform.jar"
}


docker {
	dependsOn build
    name "sergiosanchez11/${bootJar.baseName}:${bootJar.version}"
    tag 'myRegistry', "sergiosanchez11/${bootJar.baseName}:${bootJar.version}"
    dockerfile file("Dockerfile")
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
    pull true
    noCache true
}


dockerCompose {
	dockerComposeFile "docker-compose.yml"
}
